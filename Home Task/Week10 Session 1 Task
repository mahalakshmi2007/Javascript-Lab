<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Weather App Simulator</title>
  <style>
    body { font-family: Arial; display: flex; flex-direction: column; align-items: center; margin-top: 40px; }
    .weather { margin: 10px; padding: 10px; border: 1px solid #ccc; border-radius: 8px; width: 250px; text-align: center; }
    .error { color: red; }
  </style>
</head>
<body>
  <h2>Weather App Simulator</h2>
  <div id="output"></div>
  <script>
    const output = document.getElementById("output");
    function fetchWeather(city) {
      return new Promise((resolve, reject) => {
        const delay = Math.floor(Math.random() * 2000) + 1000;
        setTimeout(() => {
          const success = Math.random() > 0.3;
          if (success) resolve({ city, temp: (Math.random() * 30 + 10).toFixed(1), condition: "Sunny" });
          else reject(`Failed to fetch weather for ${city}`);
        }, delay);
      });
    }
    async function getWeatherSequential() {
      output.innerHTML += "<h3>Sequential Fetch</h3>";
      const cities = ["Paris", "Tokyo", "New York"];
      for (const city of cities) {
        try {
          const data = await fetchWeather(city);
          output.innerHTML += `<div class='weather'>${data.city}: ${data.temp}°C - ${data.condition}</div>`;
        } catch (error) {
          output.innerHTML += `<div class='weather error'>${error}</div>`;
        }
      }
    }
    async function getWeatherParallel() {
      output.innerHTML += "<h3>Parallel Fetch</h3>";
      const cities = ["London", "Berlin", "Sydney"];
      try {
        const results = await Promise.allSettled(cities.map(fetchWeather));
        results.forEach(result => {
          if (result.status === "fulfilled") output.innerHTML += `<div class='weather'>${result.value.city}: ${result.value.temp}°C - ${result.value.condition}</div>`;
          else output.innerHTML += `<div class='weather error'>${result.reason}</div>`;
        });
      } catch {}
    }
    (async () => {
      await getWeatherSequential();
      await getWeatherParallel();
    })();
  </script>
</body>
</html>
